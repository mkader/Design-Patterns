//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Singleton
{
    ///multithreaded environment, If 2 threads enter the same time, then two instances of Singleton will be created.
    public class SingletonSingleThread
    {
        private static SingletonSingleThread instance = null;

        //make the constructor private so that this class cannot be instantiated
        private SingletonSingleThread() { }

        public static SingletonSingleThread Instance
        {
            get
            {
                if (instance == null) instance = new SingletonSingleThread();
                return instance;
            }
        }

        public void ShowMessage()
        {
            Console.WriteLine("Singleton Single Thread - Not Thread Safe - Bad Code, Don't Use it    ");
        }
    }

    //Simple Thread Safe, multithreading. Slow, only one thread can access Instance() method at a time. 
    public sealed class MultiThreadLock
    {
        private static MultiThreadLock instance = null;
        private static readonly object Instancelock = new object();

        private MultiThreadLock() { }

        public static MultiThreadLock Instance
        {
            get
            {
                //Double Checking  if (instance == null) { //Dont' Use this method bad code
                lock (Instancelock)
                {
                    if (instance == null) instance = new MultiThreadLock();
                }
                return instance;
            }
        }

        public void ShowMessage()
        {
            Console.WriteLine("Singleton Multi Thread - But Slow");
        }
    }

    //Early instance creation- thread safe withotr locking - MultiThreadWihoutLocK
    public class MultiThreadWithotLock
    {
        private static MultiThreadWithotLock instance = new MultiThreadWithotLock();

        public static MultiThreadWithotLock Instance
        {
            get { return instance; }
        }

        private MultiThreadWithotLock()
        {
        }

        public void ShowMessage()
        {
            Console.WriteLine("Singleton Multi Thread - Without Lock");
        }

    }

    //Lazy 
    public class MultiThreadKLazy
    {
        private static readonly Lazy<MultiThreadKLazy> lazy = new
            Lazy<MultiThreadKLazy>(() => new MultiThreadKLazy());

        private MultiThreadKLazy() { }

        public static MultiThreadKLazy Instance
        {
            get
            {
                return lazy.Value;
            }
        }

        public void ShowMessage()
        {
            Console.WriteLine("Singleton Multi Thread - Without Lock, using Lazy");
        }
    }

    public class Client
    {
        public static void Demo()
        {
            //illegal construct - Compile Time Error: The constructor SingletonCls() is not visible
            //Singleton s = new Singleton();

            MultiThreadWithotLock.Instance.ShowMessage();

            Console.ReadLine();
        }
    }
}